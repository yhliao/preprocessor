preprocessor/ : A submodule for parsing the simulation specs and generate scripts.
  |
  |--> Dependencies
  |   ---> The current version in development has a pandas backend. Run "python3 -m pip install pandas --user" to install.
  |
  |--> Basic functions 
  |   |The preprocessor class combines 
  |   |
  |   |--> template files (keys to be replaced after preprocessing are specified as "@key@") 
  |   |   |--> Can be updated using preprocessor.update_template
  |   |
  |   |--> specification tables which are used to generate a "tree" (preprocessor.create_group)
  |   |   |
  |   |   |--> User specifies the tables used to generate the tree.
  |   |   |    The tree generated by N tables has a depth of N, each table representing one heirarchy.
  |   |   |
  |   |   |--> A table with i entries is specified in a text file with format like:
  |   |   |
  |   |   |     .START TABLE_NAME
  |   |   |      KEY1   | KEY2   | KEY3   ... 
  |   |   |      VAL1_1 | VAL2_1 | VAL3_1 ...
  |   |   |      VAL1_2 | VAL2_2 | VAL3_2 ...
  |   |   |      ...
  |   |   |      VAL1_i | VAL2_i | VAL3_i ...
  |   |   |     .END
  |   |   |
  |   |   |     Each value row entry becomes nodes of the tree once the table is selected.
  |   |   |
  |   |   |--> Each leaf of the tree is a dictionary specifying values for keys from all the table.
  |   |        Therefore, the tree will have prod_n=1~N (n_i) leaves where n_i is the number of entries in the n-th table.
  |   |
  |   ---> Finally, preprocess replace all the @KEY@ with VALUES as specified in the leaf dictionary.
  |        Similarly, the output file name can be constructed according to the leaf dictionary using "{key}" flags 
  |        in the template string.
  |
  |--> Advanced functions 
  |   | provide enhanced flexibilities, such as ... 
  |   |
  |   |-> left joining tables (preprocessor.inner_join)
  |   |
  |   --> Creating symbolic links (preprocessor.create_links)
  |
  ---> Logging
      | preprocessor can log generated file information (preprocessor.log_create). 
      | This is convienient for job submission and output visualization scipts (run.py, peek.py, visualize.py).
